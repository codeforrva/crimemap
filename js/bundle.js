(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var Alert = require('./mixins/Alert');
var Logging = require('./mixins/Logging');

var IncidentDataStore = (function() {

  var showApiResponseAlert = function(response) {
    if (response.responseJSON) {
      Alert.sendAlert("And lo! The ground shook and a fell voice uttered fearsome words of great import: \"" + response.responseJSON.message + "\"");
    } else {
      Alert.sendAlert("Whoops! Looks like we broke the Internet. Sorry about that.");
      Logging.error(response);
    }
  };

  var apiQuery = function(queryOpts) {
    var loading = $('#loading').show();
    return $.getJSON("https://brigades.opendatanetwork.com/resource/ush7-in5v.json?$$app_token=3sg2sPslVNC65HpUxDTSfRR4d&" +
      $.param(queryOpts)).fail(function(response) {
        showApiResponseAlert(response);
      })/*.always(loading.slideUp('fast'))*/;
  };

  var Fields = {
    INCIDENT_BASIC_INFO: "incident_location,offense_code_desc,incident_date_time,disposition_code_desc",
    INCIDENT_LOCATION: "incident_location"
  }

  var queryIncidents = function(options) {

    var startDate = options.startDate || '2015-01-01';
    var endDate = options.endDate || '2015-01-31';
    var fields = options.fields || Fields.INCIDENT_BASIC_INFO;
    var limit = parseInt(options.limit) || 1000;

    var deferred = $.Deferred();

    apiQuery({
      "$select": fields,
      // TODO: there is a time zone thing going on here
      "$where": "incident_date_time >= '" + startDate + "T00:00:00' and incident_date_time <= '" + endDate + "T23:59:59'",
      "$limit": limit
    }).done(function(data) {
      var incidents = data.filter(function(row) {
        // TODO: would be better to filter these out in the query. not sure what the syntax is.
        return row.incident_location.latitude && row.incident_location.longitude;
      }).map(function(row) {
        row.incident_address = JSON.parse(row.incident_location.human_address).address;
        return row;
      });
      deferred.resolve(incidents);
    });

    return deferred.promise();
  };

  var queryHeatmap = function(options) {
    var deferred = $.Deferred();
    options.fields = Fields.INCIDENT_LOCATION;
    options.limit = 50000;
    queryIncidents(options).done(function(data) {
      deferred.resolve(data.filter(function(row) {
        return (
          // TODO: these specific sites might be filterable in the API
          // e.g. incident_location.longitude != ...
          // filter out city hall
          !(row.incident_location.longitude == "-77.43364758299998" &&
          row.incident_location.latitude == "37.54070234900007") &&
          // filter out police HQ
          !(row.incident_location.longitude == "-77.44491629499998" &&
          row.incident_location.latitude == "37.546095328000035") &&
          // TODO: see if there are other police stations, courthouses, etc.
          // the very common 1300 Coalter Street address may be the sheriff's office, not sure
          true
        );
      }));
    });

    return deferred.promise();
  }

  return {
    queryIncidents: queryIncidents,
    queryHeatmap: queryHeatmap,
    Fields: Fields
  };

})();

module.exports = IncidentDataStore;



},{"./mixins/Alert":9,"./mixins/Logging":10}],2:[function(require,module,exports){
"use strict";

var Alert = require('../mixins/Alert');
var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;

var AlertBox = React.createClass({displayName: "AlertBox",
  getInitialState: function() {
    Alert.addAlertListener(function(text, alertClass) {
      this.setState({messages: this.state.messages.concat([{
        key: new Date().getTime() + Math.random(),
        text: text,
        alertClass: alertClass
      }])});
    }.bind(this));
    return {messages: []};
  },
  render: function() {
    var messageElements = this.state.messages.map(function(m, i) {
      setTimeout(function() {
        var messages = this.state.messages.splice(i,1);
        this.setState({messages: messages});
      }.bind(this), 10000);
      return (
        React.createElement(AlertMessage, {key: m.key, alertClass: m.alertClass, text: m.text})
      );
    }.bind(this));
    return (
      React.createElement("div", {id: "alert-container"}, 
        React.createElement(ReactCSSTransitionGroup, {transitionName: "alert"}, 
          messageElements
        )
      )
    );
  }
});

var AlertMessage = React.createClass({displayName: "AlertMessage",
  propTypes: {
    alertClass: React.PropTypes.oneOf(['success', 'info', 'warning', 'danger']).isRequired,
    text: React.PropTypes.string.isRequired
  },
  render: function() {
    return (
      React.createElement("div", {className: "alert alert-" + this.props.alertClass}, 
        React.createElement("button", {type: "button", className: "close", "data-dismiss": "alert", "aria-label": "Close"}, 
          React.createElement("span", {"aria-hidden": "true"}, "Ã—")
        ), 
        this.props.text
      )
    );
  }
});

module.exports = AlertBox;



},{"../mixins/Alert":9}],3:[function(require,module,exports){
"use strict";

var ControlPanel = require('./ControlPanel');
var Map = require('./Map');
var AlertBox = require('./AlertBox');
var IncidentDataStore = require('../IncidentDataStore');
var Logging = require('../mixins/Logging');

var App = React.createClass({displayName: "App",
  mixins: [Logging],

  getInitialState: function() {
    return {
      startDate: "2015-01-01",
      endDate: "2015-01-31",
      incidentFetchTime: new Date(),
      viewType: 'markers'
    }
  },

  dateRangeChanged: function(e) {
    this.setState(e);
  },

  dateRangeUpdate: function() {
    $.when(
      // markers
      IncidentDataStore.queryIncidents({
        startDate: this.state.startDate,
        endDate: this.state.endDate
      }),
      // heatmap
      IncidentDataStore.queryHeatmap({
        startDate: this.state.startDate,
        endDate: this.state.endDate
      })
    ).done(function(markerData, heatmapData) {
      this.setState({ incidents: markerData, heatmapPoints: heatmapData, incidentFetchTime: new Date() })
    }.bind(this));
  },

  viewTypeChanged: function(choice) {
    this.setState({ viewType: choice });
  },

  render: function() {
    var pointCount = undefined;
    if (this.state.viewType == 'markers' && this.state.incidents) {
      pointCount = this.state.incidents.length;
    } else if (this.state.viewType == 'heatmap' && this.state.heatmapPoints) {
      pointCount = this.state.heatmapPoints.length;
    }
    return (
      React.createElement("div", {id: "container", className: "container-fluid pull-right"}, 
        React.createElement(ControlPanel, {
          startDate: this.state.startDate, 
          endDate: this.state.endDate, 
          viewType: this.state.viewType, 
          pointCount: pointCount, 
          onDateRangeChanged: this.dateRangeChanged, 
          onDateRangeUpdate: this.dateRangeUpdate, 
          onViewTypeChanged: this.viewTypeChanged}), 
        React.createElement(Map, {viewType: this.state.viewType, 
          incidents: this.state.incidents, 
          heatmapPoints: this.state.heatmapPoints, 
          incidentFetchTime: this.state.incidentFetchTime}), 
        React.createElement(AlertBox, null)
      )
    );
  }
});

module.exports = App;



},{"../IncidentDataStore":1,"../mixins/Logging":10,"./AlertBox":2,"./ControlPanel":4,"./Map":6}],4:[function(require,module,exports){
"use strict";

var ControlSection = require('./ControlSection');

var ControlPanel = React.createClass({displayName: "ControlPanel",
  propTypes: {
    startDate: React.PropTypes.string.isRequired,
    endDate: React.PropTypes.string.isRequired,
    viewType: React.PropTypes.string.isRequired,
    pointCount: React.PropTypes.number,
    onDateRangeChanged: React.PropTypes.func,
    onDateRangeUpdate: React.PropTypes.func,
    onViewTypeChanged: React.PropTypes.func
  },
  dateRangeChanged: function(e) {
    if (this.props.onDateRangeChanged) {
      this.props.onDateRangeChanged({
        startDate: this.refs.startDate.getDOMNode().value,
        endDate: this.refs.endDate.getDOMNode().value
      });
    }
  },
  dateRangeUpdate: function(e) {
    if (this.props.onDateRangeUpdate) { this.props.onDateRangeUpdate(); }
  },
  viewTypeChanged: function(choice, e) {
    if (this.props.onViewTypeChanged) { this.props.onViewTypeChanged(choice); }
  },
  render: function() {
    var pointCountMessage = this.props.pointCount !== undefined ? this.props.pointCount + " points displayed. " : undefined;
    return (
      React.createElement("div", {id: "sidebar", className: "col-sm-3 col-sm-push-9 hidden-xs"}, 
        React.createElement("h4", null, "Richmond Police Incident Data"), 
        React.createElement("div", {className: "panel-group", id: "accordion", role: "tablist", "aria-multiselectable": "true"}, 
          React.createElement(ControlSection, {id: "DateRange", title: "Date Range", expanded: true}, 
            React.createElement("p", null, "Display incidents within this date range:"), 
            React.createElement("form", null, 
              React.createElement("div", {className: "form-group"}, 
                React.createElement("label", {htmlFor: "startDate"}, "Start Date"), 
                React.createElement("input", {id: "startDate", ref: "startDate", type: "date", value: this.props.startDate, className: "form-control", onChange: this.dateRangeChanged})
              ), 
              React.createElement("div", {className: "form-group"}, 
                React.createElement("label", {htmlFor: "endDate"}, "End Date"), 
                React.createElement("input", {id: "endDate", ref: "endDate", type: "date", value: this.props.endDate, className: "form-control", onChange: this.dateRangeChanged})
              ), 
              React.createElement("span", {id: "numMarkers"}), 
              React.createElement("button", {type: "button", className: "btn pull-right btn-primary", onClick: this.dateRangeUpdate}, "Update")
            )
          ), 
          React.createElement(ControlSection, {id: "ViewType", title: "View Type"}, 
            React.createElement("form", null, 
              React.createElement("div", {className: "form-group"}, 
                React.createElement("label", null, 
                  React.createElement("input", {id: "showMarkers", type: "radio", name: "viewType", onChange: this.viewTypeChanged.bind(this, 'markers'), 
                    checked: this.props.viewType == 'markers' ? 'checked' : ''}), "Â " + ' ' +
                  "Markers"
                )
              ), 
              React.createElement("div", {className: "form-group"}, 
                React.createElement("label", null, 
                  React.createElement("input", {id: "showHeatmap", type: "radio", name: "viewType", onChange: this.viewTypeChanged.bind(this, 'heatmap'), 
                  checked: this.props.viewType == 'heatmap' ? 'checked' : ''}), "Â " + ' ' +
                  "Heatmap"
                )
              )
            )
          ), 
          React.createElement(ControlSection, {id: "About", title: "About"}, 
            React.createElement("p", null, "This app shows police incidents in Richmond. It has events from January of 2004 through January of 2015."), 
            React.createElement("p", null, "Information comes from the Richmond Police Department's public data portal. The location is accurate to the block number, not the exact address."), 
            React.createElement("p", null, "This app was built by ", React.createElement("a", {href: "http://www.codeforrva.org/"}, "Code for RVA"), ", a brigade of ", React.createElement("a", {href: "http://www.codeforamerica.org/"}, "Code for America"), "."), 
            React.createElement("p", null, "Data is hosted by ", React.createElement("a", {href: "http://www.socrata.com/"}, "Socrata"), " on the ", React.createElement("a", {href: "https://brigades.opendatanetwork.com/TRANSPARENCY/Richmond-Police-Incident-Data/ush7-in5v"}, "Open Data Network"), ".")
          )
        ), 
        React.createElement("div", {className: "pull-right"}, 
          pointCountMessage
        )
      )
    );
  }
});

module.exports = ControlPanel;



},{"./ControlSection":5}],5:[function(require,module,exports){
"use strict";

var ControlSection = React.createClass({displayName: "ControlSection",
  propTypes: {
    id: React.PropTypes.string.isRequired,
    title: React.PropTypes.string.isRequired,
    expanded: React.PropTypes.bool
  },
  render: function() {
    return (
      React.createElement("div", {className: "panel panel-default"}, 
        React.createElement("div", {className: "panel-heading", role: "tab", id: 'heading' + this.props.id}, 
          React.createElement("h4", {className: "panel-title"}, 
            React.createElement("a", {"data-toggle": "collapse", "data-parent": "#accordion", href: '#collapse' + this.props.id, "aria-expanded": "true", "aria-controls": 'collapse' + this.props.id}, 
              this.props.title
            )
          )
        ), 
        React.createElement("div", {id: 'collapse' + this.props.id, className: "panel-collapse collapse " + (this.props.expanded ? "in" : "out"), role: "tabpanel", "aria-labelledby": 'heading' + this.props.id}, 
          React.createElement("div", {className: "panel-body"}, 
            this.props.children
          )
        )
      )
    );
  }
});

module.exports = ControlSection;



},{}],6:[function(require,module,exports){
"use strict";

var MapInfoWindow = require('./MapInfoWindow');
var Logging = require('../mixins/Logging');

var Map = React.createClass({displayName: "Map",
  mixins: [Logging],
  // component lifecycle functions
  getInitialState: function() {
    return {
      markerGenTime: this.props.incidentFetchTime,
      heatmapGenTime: this.props.incidentFetchTime
    }
  },
  componentDidMount: function(el) {
    // load new google map
    var mapOptions = {
      center: { lat: 37.5333, lng: -77.4667 },
      zoom: 12
    };
    this.setState({
      map: new google.maps.Map(this.getDOMNode(), mapOptions),
      infoWindow: new google.maps.InfoWindow()
    });
  },
  componentWillReceiveProps: function(nextProps) {
    // here we generate the Google Maps stuff based on the data
    if (this.shouldGenMarkers(nextProps)) {
      this.log("Generating new markers");
      // clear existing markers
      this.setMarkerMap(null);
      // generate new markers
      var markers = nextProps.incidents.map(function(row) {
        var marker = new google.maps.Marker({
          position: new google.maps.LatLng(
              row.incident_location.latitude,
              row.incident_location.longitude),
          title: row.offense_code_desc,
          icon: getIcon(row.offense_code_desc)
        });

        google.maps.event.addListener(marker, 'click', function() {
          this.state.infoWindow.close();
          this.state.infoWindow.setContent(React.renderToStaticMarkup(React.createElement(MapInfoWindow, {incident: row})));
          this.state.infoWindow.open(this.state.map, marker);
        }.bind(this));

        return marker;

      }.bind(this));

      // add new markers to the state along with the fetch time so we can check if we need to update
      this.setState({ markers: markers, markerGenTime: nextProps.incidentFetchTime });
    } else if (this.shouldGenHeatmap(nextProps)) {
      this.log("Generating new heatmap");
      // clear existing heatmap
      this.setHeatmapMap(null);
      var points = nextProps.heatmapPoints.map(function(row) {
        // TODO: WeightedLocation for more serious incidents?
        return new google.maps.LatLng(
          row.incident_location.latitude,
          row.incident_location.longitude);
      });
      var heatmapLayer = new google.maps.visualization.HeatmapLayer({
            data: new google.maps.MVCArray(points),
            radius: 15
          });
      this.setState({ heatmapLayer: heatmapLayer, heatmapGenTime: nextProps.incidentFetchTime });
    }
  },
  shouldComponentUpdate: function(nextProps) {
    return this.shouldGenMarkers(nextProps) || this.shouldGenHeatmap(nextProps) ||
      this.props.viewType != nextProps.viewType;
  },
  render: function() {
    if (this.props.viewType == 'markers') {
      this.setMarkerMap(this.state.map);
      this.setHeatmapMap(null);
    } else if (this.props.viewType == 'heatmap') {
      this.setMarkerMap(null);
      this.setHeatmapMap(this.state.map);
    }
    return (
      React.createElement("div", {id: "map-canvas", className: "col-sm-9 col-sm-pull-3 col-xs-12"})
    );
  },
  // other functions
  setMarkerMap: function(obj) {
    if (this.state && this.state.markers) {
      for (var i in this.state.markers) {
        this.state.markers[i].setMap(obj);
      }
    }
  },
  setHeatmapMap: function(obj) {
    if (this.state && this.state.heatmapLayer) {
      this.state.heatmapLayer.setMap(obj);
    }
  },
  shouldGenMarkers: function(nextProps) {
    return nextProps.viewType == 'markers' &&
      !!nextProps.incidents &&
      nextProps.incidentFetchTime > this.state.markerGenTime;
  },
  shouldGenHeatmap: function(nextProps) {
    return nextProps.viewType == 'heatmap' &&
      !!nextProps.heatmapPoints &&
      nextProps.incidentFetchTime > this.state.heatmapGenTime;
  }
});

var getIcon = function(str) {
  // return an icon object for a given incident type
  return {
    path: google.maps.SymbolPath.CIRCLE,
    scale: 6,
    fillColor: getColorString(str),
    fillOpacity: 0.9,
    strokeColor: getColorString(str, true),
    strokeOpacity: 0.6,
    strokeWeight: 1
  };
}

var getColorString = function(str, stroke) {
  // hash code for strings, used to generate color codes
  // http://erlycoder.com/49/javascript-hash-functions-to-convert-string-into-integer-hash-
  var hash = 5381;
  for (var i = 0; i < str.length; i++) {
      var char = str.charCodeAt(i);
      hash = ((hash << 5) + hash) + char; // hash * 33 + c
  }

  var h = hash % 360;
  var s = Math.abs((hash >> 8) % 50);
  var l = Math.abs((hash >> 4) % 50);

  return 'hsl(' + h + ', ' + (s+50) + '%, ' + (l+(stroke?0:25)) + '%)';
}

module.exports = Map;



},{"../mixins/Logging":10,"./MapInfoWindow":7}],7:[function(require,module,exports){
"use strict";

var MapInfoWindow = React.createClass({displayName: "MapInfoWindow",
  propTypes: {
    incident: React.PropTypes.object
  },
  render: function() {
    return (
      React.createElement("div", null, 
        React.createElement("h4", null, this.props.incident.offense_code_desc), 
        React.createElement("p", null, moment(this.props.incident.incident_date_time).format("MMMM D, YYYY h:mm a")), 
        React.createElement("p", null, this.props.incident.disposition_code_desc), 
        React.createElement("p", null, this.props.incident.incident_address), 
        React.createElement("p", null, "(", this.props.incident.incident_location.latitude, ", ", this.props.incident.incident_location.longitude, ")")
      )
    );
  }
});

module.exports = MapInfoWindow;



},{}],8:[function(require,module,exports){
"use strict";

var App = require('./components/App');

React.render(
  React.createElement(App, null),
  document.body
);



},{"./components/App":3}],9:[function(require,module,exports){
"use strict";

var Alert = (function() {
  var listeners = [];

  return {
    sendAlert: function(text, alertClass) {
      alertClass = alertClass || 'danger';
      for (var i in listeners) {
        listeners[i](text, alertClass);
      }
    },
    addAlertListener: function(func) {
      listeners.push(func);
    }
  };
})();

module.exports = Alert;



},{}],10:[function(require,module,exports){
"use strict";

var Logging = (function() {
  var active = "development" == "development";
  var noop = function(){};

  return {
      log: active ? console.log.bind(console) : noop,
      warn: active ? console.warn.bind(console) : noop,
      error: active ? console.error.bind(console) : noop
  };
})();

module.exports = Logging;



},{}]},{},[8])
//# sourceMappingURL=data:application/json;base64,
